name: Export model
description: Fetch a model given a model name (display name) and export to GCS.
inputs:
- {name: model_resource_name, type: String, description: Resource name of the model
    to export}
- {name: project_location, type: String, description: location of the Google Cloud
    project. Defaults to None., optional: true}
- {name: project_id, type: String, description: project id of the Google Cloud project.
    Defaults to None., optional: true}
outputs:
- {name: model, type: Model, description: output model to be exported to GCS}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.10.0' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def export_model(
          model_resource_name: str,
          model: Output[Model],
          project_location: str = None,
          project_id: str = None,
      ) -> None:
          """
          Fetch a model given a model name (display name) and export to GCS.

          Args:
              model_resource_name (str): Resource name of the model to export
              model (Output[Model]): output model to be exported to GCS
              project_location (str): location of the Google Cloud project. Defaults to None.
              project_id (str): project id of the Google Cloud project. Defaults to None.
          Returns:
              None
          """

          import logging
          from google.cloud.aiplatform import Model

          model_to_be_exported = Model(model_resource_name)
          logging.info(f"model display name: {model_to_be_exported.display_name}")
          logging.info(f"model resource name: {model_to_be_exported.resource_name}")
          logging.info(f"model uri: {model_to_be_exported.uri}")

          logging.info(f"export model to {model.uri}")
          result = model_to_be_exported.export_model(
              export_format_id="custom-trained",
              artifact_destination=model.uri,
              sync=True,
          )

          # artifactOutputUri could include a separate sub-folder containing the
          # model, so update the model path to include it
          model.path = result["artifactOutputUri"]
          model.metadata["resourceName"] = model_resource_name
          model.metadata["model_labels"] = model_to_be_exported.labels["model_label"]
          logging.info(f"exported model to {model.path}")

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - export_model
