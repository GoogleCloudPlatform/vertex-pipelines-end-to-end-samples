name: Validate schema
description: Task which has the objective to wrap the tfdv.validate_statistics
inputs:
- name: statistics
  type: Artifact
  description: |-
    Input artifact consisting of a statistics file.
    For more details see
    https://www.tensorflow.org/tfx/data_validation/api_docs/python/tfdv/validate_statistics
- name: schema_path
  type: String
  description: |-
    GCS uri path where the tfdv schema is stored. For more details see
    https://www.tensorflow.org/tfx/data_validation/api_docs/python/tfdv/validate_statistics
outputs:
- name: anomalies
  type: Artifact
  description: |-
    Output artifact consisting of a list of anomalies
    serialised in JSON file.
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'tensorflow-data-validation==1.6.0' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def validate_schema(
          statistics: Input[Artifact],
          anomalies: Output[Artifact],
          schema_path: str,
      ) -> None:
          """
          Task which has the objective to wrap the tfdv.validate_statistics
          function, validating a statistics file according to a schema.

          Args:
              statistics (Input[Artifact]): Input artifact consisting of a statistics file.
                  For more details see
                  https://www.tensorflow.org/tfx/data_validation/api_docs/python/tfdv/validate_statistics
              anomalies (Output[Artifact]): Output artifact consisting of a list of anomalies
                  serialised in JSON file.
              schema_path (str): GCS uri path where the tfdv schema is stored. For more details see
                  https://www.tensorflow.org/tfx/data_validation/api_docs/python/tfdv/validate_statistics

          Returns:
              None
          """  # noqa

          import logging
          import tensorflow_data_validation as tfdv

          logging.getLogger().setLevel(logging.INFO)

          logging.info(f"loading stats from: {statistics.path}")
          dataset_statistics = tfdv.load_statistics(input_path=statistics.path)

          logging.info(f"loading schema from: {schema_path}")
          schema = tfdv.load_schema_text(schema_path)

          logging.info("validating stats...")
          detected_anomalies = tfdv.validate_statistics(
              statistics=dataset_statistics,
              schema=schema,
          )

          logging.info(f"writing anomalies to: {anomalies.path}")
          tfdv.write_anomalies_text(detected_anomalies, anomalies.path)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - validate_schema
