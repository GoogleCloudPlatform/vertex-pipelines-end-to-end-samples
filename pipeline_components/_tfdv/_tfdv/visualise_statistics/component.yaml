name: Visualise statistics
description: Generate an html artifact allowing to visualize the data statistics.
inputs:
- {name: statistics, type: Artifact, description: Generated protobuf statistics from
    TFDV.}
- {name: statistics_name, type: String, description: Optional. Name of the statistics.
    Defaults to "", default: '', optional: true}
- name: other_statistics_name
  type: String
  description: |-
    Optional. Name of other statistics.
    Defaults to None.
  default: ''
  optional: true
- name: other_statistics_path
  type: String
  description: |-
    Optional. Path to other statistics to be
    visualised alongside statistics. Defaults to ""
  optional: true
outputs:
- name: view
  type: HTML
  description: |-
    Output artifact to store the visualised statistics
    as html file.
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'tensorflow-data-validation==1.6.0' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def visualise_statistics(
          statistics: Input[Artifact],
          view: Output[HTML],
          statistics_name: str = "",
          other_statistics_name: str = "",
          other_statistics_path: str = None,
      ) -> None:
          """
          Generate an html artifact allowing to visualize the data statistics.
          Args:
              statistics (Input[Artifact]): Generated protobuf statistics from TFDV.
              view (Output[Artifact]): Output artifact to store the visualised statistics
                  as html file.
              statistics_name (str): Optional. Name of the statistics. Defaults to ""
              other_statistics_path (str): Optional. Path to other statistics to be
                  visualised alongside statistics. Defaults to ""
              other_statistics_name (str): Optional. Name of other statistics.
                  Defaults to None.

          Returns:
              None
          """
          import tensorflow_data_validation as tfdv
          from tensorflow_data_validation.utils.display_util import (
              get_statistics_html,
          )

          # load stats
          stats = tfdv.load_statistics(input_path=statistics.path)
          other_stats = None
          if other_statistics_path:
              other_stats = tfdv.load_statistics(input_path=other_statistics_path)

          # create html content
          html = get_statistics_html(
              lhs_statistics=stats,
              lhs_name=statistics_name,
              rhs_statistics=other_stats,
              rhs_name=other_statistics_name,
          )

          # ensure view is stored as html (this will set content-type to text/html)
          if not view.path.endswith(".html"):
              view.path += ".html"

          # write html to output file
          with open(view.path, "w") as f:
              f.write(html)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - visualise_statistics
