name: Show anomalies
description: Analyzes an anomaly protobuf and reports the status.
inputs:
- {name: anomalies, type: Artifact, description: Input anomalies in protobuf text
    format.}
- name: fail_on_anomalies
  type: Boolean
  description: |-
    Whether this step should fail if any anomalies are
    found. Defaults to True.
  default: "True"
  optional: true
- name: anomaly_code_ignore_list
  type: JsonArray
  description: |-
    Optional list of codes of anomaly types to ignore as
    anomalies. This list needs to contain the codes as integers &
    NOT the anomaly types as strings.
    Some examples of anomaly types include:
    1. Code 19: FEATURE_TYPE_NOT_PRESENT - Column either not present
       or has 100% nulls
    2. Code 16: FEATURE_TYPE_LOW_FRACTION_PRESENT - % of non-null values in
       a column is lower than expected
    Reference for comprehensive list of anomaly types & their codes:
    https://www.tensorflow.org/tfx/data_validation/anomalies
    https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/anomalies.proto
  optional: true
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'tensorflow-data-validation==1.6.0' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef show_anomalies(\n    anomalies: Input[Artifact],\n    fail_on_anomalies:\
      \ bool = True,\n    anomaly_code_ignore_list: list = None,\n) -> None:\n   \
      \ \"\"\"\n    Analyzes an anomaly protobuf and reports the status.\n\n    Args:\n\
      \        anomalies (Input[Artifact]): Input anomalies in protobuf text format.\n\
      \        fail_on_anomalies (bool): Whether this step should fail if any anomalies\
      \ are\n            found. Defaults to True.\n        anomaly_code_ignore_list:\
      \ Optional list of codes of anomaly types to ignore as\n            anomalies.\
      \ This list needs to contain the codes as integers &\n            NOT the anomaly\
      \ types as strings.\n            Some examples of anomaly types include:\n \
      \           1. Code 19: FEATURE_TYPE_NOT_PRESENT - Column either not present\n\
      \               or has 100% nulls\n            2. Code 16: FEATURE_TYPE_LOW_FRACTION_PRESENT\
      \ - % of non-null values in\n               a column is lower than expected\n\
      \            Reference for comprehensive list of anomaly types & their codes:\n\
      \            https://www.tensorflow.org/tfx/data_validation/anomalies\n    \
      \        https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/anomalies.proto\n\
      \n\n    Returns:\n        None\n    \"\"\"\n\n    import logging\n    import\
      \ tensorflow_data_validation as tfdv\n    from tensorflow_data_validation.utils.anomalies_util\
      \ import remove_anomaly_types\n\n    logging.getLogger().setLevel(logging.INFO)\n\
      \n    # Load all anomalies\n    logging.info(f\"For details of all anomalies,\
      \ please refer to {anomalies.uri}\")\n    detected_anomalies = tfdv.load_anomalies_text(anomalies.path)\n\
      \n    # Loop through all anomalies and log details\n    for key, val in detected_anomalies.anomaly_info.items():\n\
      \        logging.warning(f\"found anomaly for key {key}, reason: {val.short_description}\"\
      )\n\n    # If defined, remove all anomalies in the ignore list\n    if anomaly_code_ignore_list:\n\
      \        logging.info(f\"Ignoring all anomalies of code: {anomaly_code_ignore_list}\"\
      )\n        # \_remove_anomaly_types does an in-place removal of all anomalies\n\
      \        # \_in the ignore list\n        remove_anomaly_types(\n           \
      \ anomalies=detected_anomalies,\n            types_to_remove=anomaly_code_ignore_list,\n\
      \        )\n\n    # If there are anomalies, decide whether to fail\n    if detected_anomalies.anomaly_info\
      \ and fail_on_anomalies:\n        msg = f\"Found {len(detected_anomalies.anomaly_info)}\
      \ anomalies, failing!\"\n        logging.error(msg)\n        raise RuntimeError(msg)\n\
      \n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - show_anomalies
